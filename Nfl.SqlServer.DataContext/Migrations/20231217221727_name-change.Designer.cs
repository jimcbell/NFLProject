// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NFL.SqlServer.DataContext;

#nullable disable

namespace Nfl.SqlServer.DataContext.Migrations
{
    [DbContext(typeof(NFLDataContext))]
    [Migration("20231217221727_name-change")]
    partial class namechange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NFL.SqlServer.DataContext.Entities.NflPlay", b =>
                {
                    b.Property<int>("PlayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RecordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlayId"));

                    b.Property<string>("DefenseTeam")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DefenseTeam");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<int>("Down")
                        .HasColumnType("int")
                        .HasColumnName("Down");

                    b.Property<string>("Formation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Formation");

                    b.Property<DateOnly>("GameDate")
                        .HasColumnType("date")
                        .HasColumnName("GameDate");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("GameID");

                    b.Property<bool>("IsChallenge")
                        .HasColumnType("bit")
                        .HasColumnName("IsChallenge");

                    b.Property<bool>("IsChallengeReversed")
                        .HasColumnType("bit")
                        .HasColumnName("IsChallengeReversed");

                    b.Property<bool>("IsFumble")
                        .HasColumnType("bit")
                        .HasColumnName("IsFumble");

                    b.Property<bool>("IsIncomplete")
                        .HasColumnType("bit")
                        .HasColumnName("IsIncomplete");

                    b.Property<bool>("IsInterception")
                        .HasColumnType("bit")
                        .HasColumnName("IsInterception");

                    b.Property<bool>("IsMeasurement")
                        .HasColumnType("bit")
                        .HasColumnName("IsMeasurement");

                    b.Property<bool>("IsNoPlay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPass")
                        .HasColumnType("bit")
                        .HasColumnName("IsPass");

                    b.Property<bool>("IsPenalty")
                        .HasColumnType("bit")
                        .HasColumnName("IsPenalty");

                    b.Property<bool>("IsPenaltyAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRush")
                        .HasColumnType("bit")
                        .HasColumnName("IsRush");

                    b.Property<bool>("IsSack")
                        .HasColumnType("bit")
                        .HasColumnName("IsSack");

                    b.Property<bool>("IsTouchdown")
                        .HasColumnType("bit")
                        .HasColumnName("IsTouchdown");

                    b.Property<bool>("IsTwoPointConversion")
                        .HasColumnType("bit")
                        .HasColumnName("IsTwoPointConversion");

                    b.Property<bool>("IsTwoPointConversionSuccessful")
                        .HasColumnType("bit")
                        .HasColumnName("TwoPointConSuccess");

                    b.Property<int>("Minute")
                        .HasColumnType("int")
                        .HasColumnName("Minute");

                    b.Property<bool>("NextScore")
                        .HasColumnType("bit")
                        .HasColumnName("NextScore");

                    b.Property<int>("NflPlayTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OffenseTeam")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OffenseTeam");

                    b.Property<string>("PassType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PassType");

                    b.Property<string>("PenaltyTeam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PenaltyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PenaltyYards")
                        .HasColumnType("int");

                    b.Property<string>("PlayType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PlayType");

                    b.Property<int>("Quarter")
                        .HasColumnType("int")
                        .HasColumnName("Quarter");

                    b.Property<string>("RushDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("int")
                        .HasColumnName("SeasonYear");

                    b.Property<int>("Second")
                        .HasColumnType("int")
                        .HasColumnName("Second");

                    b.Property<bool>("SeriesFirstDown")
                        .HasColumnType("bit")
                        .HasColumnName("SeriesFirstDown");

                    b.Property<bool>("TeamWin")
                        .HasColumnType("bit")
                        .HasColumnName("TeamWin");

                    b.Property<int>("ToGo")
                        .HasColumnType("int")
                        .HasColumnName("ToGo");

                    b.Property<int>("YardLine")
                        .HasColumnType("int")
                        .HasColumnName("YardLine");

                    b.Property<int>("YardLineFixed")
                        .HasColumnType("int");

                    b.Property<int>("Yards")
                        .HasColumnType("int")
                        .HasColumnName("Yards");

                    b.HasKey("PlayId");

                    b.HasIndex("NflPlayTypeId");

                    b.HasIndex("PlayId")
                        .IsUnique();

                    b.ToTable("NflPlay", (string)null);
                });

            modelBuilder.Entity("Nfl.SqlServer.DataContext.Entities.NflPlayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PlayType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("NflPlayType", (string)null);
                });

            modelBuilder.Entity("NFL.SqlServer.DataContext.Entities.NflPlay", b =>
                {
                    b.HasOne("Nfl.SqlServer.DataContext.Entities.NflPlayType", "NflPlayType")
                        .WithMany("NflPlays")
                        .HasForeignKey("NflPlayTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NflPlayType");
                });

            modelBuilder.Entity("Nfl.SqlServer.DataContext.Entities.NflPlayType", b =>
                {
                    b.Navigation("NflPlays");
                });
#pragma warning restore 612, 618
        }
    }
}
